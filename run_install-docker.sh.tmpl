{{ if and (eq .chezmoi.os "darwin" "linux") (not .headless) -}}

{{- $cmd := "docker" -}}
{{- $pkg := "docker-ce docker-ce-cli containerd.io" -}}
{{- $gpg_key_file := "docker.gpg" -}}
{{- $repo_file := "docker.list" -}}
{{- $repo_url := "deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable" -}}
{{- $key_url := "https://download.docker.com/linux/ubuntu/gpg" -}}

{{ $sudo := "sudo " -}}
{{ if eq .chezmoi.username "root" -}}
{{   $sudo = "" -}}
{{ end -}}

{{- $gpg_key_path := printf "/etc/apt/trusted.gpg.d/%s" $gpg_key_file -}}
{{- $repo_path := printf "/etc/apt/sources.list.d/%s" $repo_file -}}

#!/bin/bash
set -euo pipefail

# remove old docker
for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do
    {{ $sudo }}apt-get remove -y $pkg || true
done

# Add the GPG key if it doesn't already exist
if [[ ! -f {{ $gpg_key_path }} ]]; then
    # Update package lists
    {{ $sudo }}apt update
    # Install necessary dependencies
    {{ $sudo }}apt install -y apt-transport-https ca-certificates curl gnupg lsb-release

    echo "## Adding {{ $gpg_key_file }} GPG key..."
    curl -fsSL {{ $key_url }} | gpg --dearmor > {{ $gpg_key_file }}
    {{ $sudo }}install -o root -g root -m 644 {{ $gpg_key_file }} {{ $gpg_key_path }}
    rm {{ $gpg_key_file }}
else
    echo "## GPG key {{ $gpg_key_file }} already exists. Skipping..."
fi

# Add the VS Code repository if it doesn't already exist
if [[ ! -f {{ $repo_path }} ]]; then
    echo "## Adding the {{ $cmd }} repository..."
    {{ $sudo }}sh -c "echo \"{{ $repo_url }}\" > {{ $repo_path }}"
    {{ $sudo }}apt update
else
    echo "## {{ $repo_file }} repository already exists. Skipping..."
fi

# Check if {{ $pkg }} command exists
if command -v {{ $cmd }} &> /dev/null; then
    echo "## {{ $cmd }} is already installed. Updating..."
    {{ $sudo }}apt upgrade -y {{ $pkg }}
else
    {{ $sudo }}apt install -y {{ $pkg }}
fi

# Output success message
{{ $sudo }}systemctl start docker
{{ $sudo }}systemctl enable docker
{{ $cmd }} --version
echo "## {{ $pkg }} installation or update is complete!"
{{ end -}}